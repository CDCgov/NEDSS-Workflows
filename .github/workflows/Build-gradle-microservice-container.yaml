name: Build and store a microservice container
on:
  workflow_call:
    inputs:
      microservice_name:
        description: "Name of microservice corresponding to a container in ECR."
        required: true
        type: string
      dockerfile_relative_path:
        description: "Relative path to dockerfile being built (use '-f' docker argument if the dockerfile referenced from the root directory)."
        required: true
        type: string
      environment_classifier:
        description: Metadata to append to application version. Ex. if version=1.0.0, and environment_classifier=SNAPSHOT result will be 1.0.0-SNAPSHOT.<githubsha>.
        required: true
        type: string
      update_helm_chart:
        description: (true or false) Should the image tag be updated within the Helm chart? If true, specify a value for values_file_with_path. Default=false.
        required: true
        type: boolean
        default: false
      values_file_with_path:
        description: What is the path to the helm chart in NBS helm chart repository? (ex. charts/elasticsearch/values.yaml)
        type: string
        default: ""       
    secrets:
      CDC_NBS_SANDBOX_SHARED_SERVICES_ACCOUNTID:
        description: "Secret named CDC_NBS_SANDBOX_SHARED_SERVICES_ACCOUNTID where ECR resides."
        required: true
      ECR_REPO_BASE_NAME:
        description: "Secret named ECR_REPO_BASE_NAME describing the ECR base path name."
        required: true
      GIT_USER_EMAIL:
        description: "Secret named GIT_USER_EMAIL for the CI user email."
        required: true
      GIT_USER_NAME:
        description: "Secret named ECR_REPO_BASE_NAME for the CI user name."
        required: true
      HELM_TOKEN:
        description: "Secret named HELM_TOKEN to access helm chart repository"
        required: true
    outputs:
      output_image_tag:
        description: "Container image tag" 
        value: ${{ jobs.build.outputs.output_image_tag }}

jobs:
  build:
    name: Build and store container
    runs-on: ubuntu-latest
    outputs:
      output_image_tag: ${{ steps.set-env-variables.outputs.output_image_tag }}
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    # New comment
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Cache Gradle packages
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    
    - name: Configure Environment Variables
      run: |
        github_sha_short=$(git rev-parse --short "$GITHUB_SHA")      
        github_repo_name="$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)"        
        github_tag=${GITHUB_REF#refs/tags/}
        echo "github_sha_short=$github_sha_short" >> $GITHUB_ENV        
        echo "github_tag=$github_tag" >> $GITHUB_ENV     

    - name: (Gradle) Create microservice version tag
      run: |
        app_version=$(./gradlew printVersion -PversionClassifier=${{inputs.environment_classifier}} | grep "Version:" | awk '{print $2}')
        new_image_tag=$app_version.${{env.github_sha_short}}
        echo "new_image_tag=$new_image_tag" >> $GITHUB_ENV

    - name: Set image tag output
      id: set-env-variables
      run: echo "output_image_tag=${{ env.new_image_tag }}" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: "arn:aws:iam::${{ secrets.CDC_NBS_SANDBOX_SHARED_SERVICES_ACCOUNTID }}:role/cdc-github-${{ env.github_repo_name }}-dev-role"
        role-session-name: deploy-infrastructure
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push ${{ inputs.microservice_name }} image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPO_BASE_NAME }}/${{ inputs.microservice_name }}
        IMAGE_TAG: "${{ env.new_image_tag }}"
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${{ inputs.dockerfile_relative_path}}
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  # update-helm:
  #   needs: build
  #   if: ${{ inputs.update_helm_chart == true }}    
  #   uses: CDCgov/NEDSS-Workflows/.github/workflows/Update-helm-charts.yaml@main
  #   with:
  #     values_file_with_path: ${{ inputs.values_file_with_path }}
  #     new_image_tag: ${{ env.new_image_tag }}
  #     microservice_name: ${{inputs.microservice_name}}
  #     GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
  #     GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}