name: Run Trivy Container Scan
on:
  workflow_call:
    inputs:
      # container build inputs
      microservice_name:
        description: "Name of microservice corresponding to a container in ECR."
        required: true
        type: string
      dockerfile_relative_path:
        description: "Relative path to dockerfile being built (use of '-f' docker argument will FAIL in this particular workflow)."
        required: true
        type: string
      # trivy inputs      
      container-ref:
        description: 'Locally built container id which Trivy should scan'
        required: true
        type: string
      severity:
        description: 'Severities of vulnerabilities to be scanned for and displayed (UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)'
        required: false  
        default: 'CRITICAL,HIGH'
        type: string 
      upload-to-github-security-tab:
        description: 'Upload results to GitHub security tab?'
        required: false
        default: false
        type: boolean
      ignore-unfixed:
        description: Ignore unpatched/unfixed vulnerabilities
        required: false
        default: true
        type: boolean 
      skip-dirs:
        description: 'Comma separated list of directories where traversal is skipped'
        required: false 
        default: ''
        type: string
      skip-files:
        description: 'Comma separated list of files where traversal is skipped'
        required: false  
        default: ''
        type: string
      timeout:
        description: 'Scan timeout duration'
        required: false  
        default: '10m0s'
        type: string
      exit-code:
        description: 'Exit code when specified vulnerabilities are found (0).'
        required: false  
        default: '0'
        type: string
      trivyignores:
        description: 'Comma-separated list of relative paths in repository to one or more .trivyignore files, for usage see https://aquasecurity.github.io/trivy/v0.19.2/vulnerability/examples/filter/'
        required: false         
        type: string
  

jobs:
  build:
    name: Scan container with Trivy
    runs-on: ubuntu-latest
 
    steps:
      # Runs scanner for neat printing in GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Build and tag ${{ inputs.microservice_name }} image 
      id: build-image
      env:        
        IMAGE_TAG: "${{ inputs.microservice_name }}"
      run: |
        # Build a docker container 
        docker build -t $IMAGE_TAG ${{ inputs.dockerfile_relative_path}}   
    
    - name: Scan container image
      uses: ./.github/actions/trivy-scanner
      env: 
        IMAGE_TAG: "${{ inputs.microservice_name }}"
      with:
        container-ref: $IMAGE_TAG
        severity: ${{ inputs.severity }}
        upload-to-github-security-tab: ${{ inputs.upload-to-github-security-tab }}
        ignore-unfixed: ${{ inputs.ignore-unfixed }}
        skip-dirs: ${{ inputs.skip-dirs }}
        skip-files: ${{ inputs.skip-files }}
        exit-code: ${{ inputs.exit-code }}
        trivyignores: ${{ inputs.trivyignores }} 
    # - name: Run Trivy vulnerability scanner
    #   if: ${{ !github.upload-to-github-security-tab }}
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: '${{ inputs.container-ref }}'
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    #     exit-code: '${{ inputs.exit-code }}'
    #     ignore-unfixed: ${{inputs.ignore-unfixed}}
    #     vuln-type: 'os,library'
    #     severity: ${{inputs.severity}}
    #     timeout: ${{inputs.timeout}}
    #     trivyignores: ${{inputs.trivyignores}}

    # # Runs scanner for printing to GitHub Security Tab
    # - name: Run Trivy vulnerability scanner for printing to GitHub Security Tab
    #   if: ${{ github.upload-to-github-security-tab }}
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: '${{ inputs.container-ref }}'
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    #     exit-code: '1'
    #     ignore-unfixed: ${{inputs.ignore-unfixed}}
    #     vuln-type: 'os,library'
    #     severity: ${{inputs.severity}}
    #     timeout: ${{inputs.timeout}}
    #     trivyignores: ${{inputs.trivyignores}}

    # - name: Upload Trivy scan results to GitHub Security tab
    #   if: ${{ github.upload-to-github-security-tab }}
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: 'trivy-results.sarif'